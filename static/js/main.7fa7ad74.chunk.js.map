{"version":3,"sources":["logo2.png","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","ReactGA","pageview","className","Grid","stackable","columns","centered","padded","Column","Header","as","icon","textAlign","Image","size","src","logo","Content","Segment","Group","href","title","basic","initialize","window","location","pathname","search","App","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,mC,iQCwC5BC,MAlCf,WAKE,OADAC,IAAQC,SAAS,KAEf,yBAAKC,UAAW,gBACd,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,UAAQ,EAACC,QAAM,GACzC,kBAACJ,EAAA,EAAKK,OAAN,KACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,MAAI,EAACC,UAAU,UAC7B,kBAACC,EAAA,EAAD,CACEP,UAAQ,EACRQ,KAAK,UACLC,IAAKC,MAEP,kBAACP,EAAA,EAAOQ,QAAR,KAAiB,gBAEnB,kBAACC,EAAA,EAAQC,MAAT,KACE,kBAACD,EAAA,EAAD,CAASN,UAAW,SAAUV,UAAW,cACvC,uBAAGkB,KAlBC,2BAkBcC,MAAO,QAAzB,SAEF,kBAACH,EAAA,EAAD,CAASN,UAAW,SAAUV,UAAW,cACvC,uBAAGkB,KApBS,4BAoBcC,MAAO,iBAAjC,kBAEF,kBAACH,EAAA,EAAD,CAASI,OAAK,EAACV,UAAW,UACxB,+BAAQ,kC,OCzBtBZ,IAAQuB,WAAW,gBACnBvB,IAAQC,SAASuB,OAAOC,SAASC,SAAWF,OAAOC,SAASE,Q,IAU7CC,E,uKANX,OACE,kBAAC,EAAD,U,GAHYC,aCGEC,QACW,cAA7BN,OAAOC,SAASM,UAEe,UAA7BP,OAAOC,SAASM,UAEhBP,OAAOC,SAASM,SAASC,MACvB,2D,cCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7fa7ad74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.fd630033.png\";","import React from 'react'\nimport { Grid, Segment, Image, Header } from 'semantic-ui-react'\nimport ReactGA from 'react-ga'\n\nimport logo from '../logo2.png'\n\nfunction Home() {\n  const blogUrl = 'https://blog.bocabit.com'\n  const personalSiteUrl = 'https://renefernandez.com'\n\n  ReactGA.pageview('/')\n  return (\n    <div className={'Aligner-item'}>\n      <Grid stackable columns={1} centered padded>\n        <Grid.Column>\n          <Header as='h1' icon textAlign='center'>\n            <Image\n              centered\n              size='massive'\n              src={logo}\n            />\n            <Header.Content>{'bocabit.com'}</Header.Content>\n          </Header>\n          <Segment.Group>\n            <Segment textAlign={'center'} className={'main-links'}>\n              <a href={blogUrl} title={'Blog'} >Blog</a>\n            </Segment>\n            <Segment textAlign={'center'} className={'main-links'}>\n              <a href={personalSiteUrl} title={'Personal Site'}>Personal Site</a>\n            </Segment>\n            <Segment basic textAlign={'center'}>\n              <small>{'2020 - Ren√© Fernandez'}</small>\n            </Segment>\n          </Segment.Group>\n        </Grid.Column>\n      </Grid>\n    </div>\n  )\n}\n\nexport default Home\n","import React, { Component } from 'react'\nimport ReactGA from 'react-ga'\n\nimport Home from './components/Home'\nimport './App.css'\n\nReactGA.initialize('UA-1536056-7')\nReactGA.pageview(window.location.pathname + window.location.search)\n\nclass App extends Component {\n  render () {\n    return (\n      <Home />\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\n// CSS\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}